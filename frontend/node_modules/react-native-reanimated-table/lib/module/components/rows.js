function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { useMemo } from 'react';
import { View, StyleSheet } from 'react-native';
import { Cell } from './cell';
import { sum } from '../utils';
export const Row = _ref => {
  let {
    data,
    style,
    widthArr,
    height,
    flexArr,
    textStyle,
    cellTextStyle,
    ...props
  } = _ref;
  const width = widthArr ? sum(widthArr) : 0;
  const composedStyle = useMemo(() => {
    const styles = {};
    if (width) {
      styles.width = width;
    }
    if (height) {
      styles.height = height;
    }
    return styles;
  }, [width, height]);
  return data ? /*#__PURE__*/React.createElement(View, {
    style: StyleSheet.flatten([composedStyle, styles.row, style])
  }, data.map((item, i) => {
    const flex = flexArr === null || flexArr === void 0 ? void 0 : flexArr[i];
    const wth = widthArr === null || widthArr === void 0 ? void 0 : widthArr[i];
    return /*#__PURE__*/React.createElement(Cell, _extends({
      key: i,
      data: item,
      width: wth,
      height: height,
      flex: flex,
      textStyle: StyleSheet.flatten([cellTextStyle && cellTextStyle(item), textStyle])
    }, props));
  })) : null;
};
export const Rows = _ref2 => {
  let {
    data,
    style,
    widthArr,
    heightArr,
    flexArr,
    textStyle,
    ...props
  } = _ref2;
  const flex = flexArr ? sum(flexArr) : 0;
  const width = widthArr ? sum(widthArr) : 0;
  const composedStyle = useMemo(() => {
    const styles = {};
    if (flex) {
      styles.flex = flex;
    }
    if (width) {
      styles.width = width;
    }
    return styles;
  }, [flex, width]);
  return data ? /*#__PURE__*/React.createElement(View, {
    style: composedStyle
  }, data.map((item, i) => {
    const height = heightArr === null || heightArr === void 0 ? void 0 : heightArr[i];
    return /*#__PURE__*/React.createElement(Row, _extends({
      key: i,
      data: item,
      widthArr: widthArr,
      height: height,
      flexArr: flexArr,
      style: style,
      textStyle: textStyle
    }, props));
  })) : null;
};
const styles = StyleSheet.create({
  row: {
    flexDirection: 'row',
    overflow: 'hidden'
  }
});
//# sourceMappingURL=rows.js.map