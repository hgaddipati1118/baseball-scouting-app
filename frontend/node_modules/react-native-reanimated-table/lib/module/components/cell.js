function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { useMemo } from 'react';
import { View, Text, StyleSheet } from 'react-native';
export const Cell = _ref => {
  let {
    data,
    width,
    height,
    flex,
    style,
    textStyle,
    borderStyle,
    ...props
  } = _ref;
  const textDom = /*#__PURE__*/React.isValidElement(data) ? data : /*#__PURE__*/React.createElement(Text, _extends({
    style: StyleSheet.flatten([textStyle, styles.text])
  }, props), data);
  const borderTopWidth = (borderStyle === null || borderStyle === void 0 ? void 0 : borderStyle.borderWidth) ?? 0;
  const borderRightWidth = borderTopWidth;
  const borderColor = (borderStyle === null || borderStyle === void 0 ? void 0 : borderStyle.borderColor) ?? '#000';
  const composedStyles = useMemo(() => {
    const styles = {};
    if (width) {
      styles.width = width;
    }
    if (height) {
      styles.height = height;
    }
    if (flex) {
      styles.flex = flex;
    }
    if (!width && !flex && !height && !style) {
      styles.flex = 1;
    }
    return styles;
  }, [width, height, flex, style]);
  return /*#__PURE__*/React.createElement(View, {
    style: StyleSheet.flatten([{
      borderTopWidth,
      borderRightWidth,
      borderColor
    }, styles.cell, composedStyles, style])
  }, textDom);
};
const styles = StyleSheet.create({
  cell: {
    justifyContent: 'center'
  },
  text: {
    backgroundColor: 'transparent'
  }
});
//# sourceMappingURL=cell.js.map