{"version":3,"names":["React","useMemo","View","Text","StyleSheet","Cell","_ref","data","width","height","flex","style","textStyle","borderStyle","props","textDom","isValidElement","createElement","_extends","flatten","styles","text","borderTopWidth","borderWidth","borderRightWidth","borderColor","composedStyles","cell","create","justifyContent","backgroundColor"],"sources":["cell.tsx"],"sourcesContent":["import React, { FC, useMemo } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ViewStyle,\n  TextStyle,\n  StyleProp,\n} from 'react-native';\n\ninterface CellProps {\n  data: React.ReactNode;\n  width?: number;\n  height?: number;\n  flex?: number;\n  style?: StyleProp<ViewStyle>;\n  textStyle?: StyleProp<TextStyle>;\n  borderStyle?: {\n    borderColor?: string;\n    borderWidth?: number;\n  };\n}\n\nexport const Cell: FC<CellProps> = ({\n  data,\n  width,\n  height,\n  flex,\n  style,\n  textStyle,\n  borderStyle,\n  ...props\n}) => {\n  const textDom = React.isValidElement(data) ? (\n    data\n  ) : (\n    <Text style={StyleSheet.flatten([textStyle, styles.text])} {...props}>\n      {data}\n    </Text>\n  );\n\n  const borderTopWidth = borderStyle?.borderWidth ?? 0;\n  const borderRightWidth = borderTopWidth;\n  const borderColor = borderStyle?.borderColor ?? '#000';\n\n  const composedStyles = useMemo(() => {\n    const styles: ViewStyle = {};\n    if (width) {\n      styles.width = width;\n    }\n    if (height) {\n      styles.height = height;\n    }\n    if (flex) {\n      styles.flex = flex;\n    }\n    if (!width && !flex && !height && !style) {\n      styles.flex = 1;\n    }\n    return styles;\n  }, [width, height, flex, style]);\n\n  return (\n    <View\n      style={StyleSheet.flatten([\n        {\n          borderTopWidth,\n          borderRightWidth,\n          borderColor,\n        },\n        styles.cell,\n        composedStyles,\n        style,\n      ])}\n    >\n      {textDom}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  cell: { justifyContent: 'center' },\n  text: { backgroundColor: 'transparent' },\n});\n"],"mappings":";AAAA,OAAOA,KAAK,IAAQC,OAAO,QAAQ,OAAO;AAC1C,SACEC,IAAI,EACJC,IAAI,EACJC,UAAU,QAIL,cAAc;AAerB,OAAO,MAAMC,IAAmB,GAAGC,IAAA,IAS7B;EAAA,IAT8B;IAClCC,IAAI;IACJC,KAAK;IACLC,MAAM;IACNC,IAAI;IACJC,KAAK;IACLC,SAAS;IACTC,WAAW;IACX,GAAGC;EACL,CAAC,GAAAR,IAAA;EACC,MAAMS,OAAO,GAAG,aAAAf,KAAK,CAACgB,cAAc,CAACT,IAAI,CAAC,GACxCA,IAAI,gBAEJP,KAAA,CAAAiB,aAAA,CAACd,IAAI,EAAAe,QAAA;IAACP,KAAK,EAAEP,UAAU,CAACe,OAAO,CAAC,CAACP,SAAS,EAAEQ,MAAM,CAACC,IAAI,CAAC;EAAE,GAAKP,KAAK,GACjEP,IAAI,CAER;EAED,MAAMe,cAAc,GAAG,CAAAT,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEU,WAAW,KAAI,CAAC;EACpD,MAAMC,gBAAgB,GAAGF,cAAc;EACvC,MAAMG,WAAW,GAAG,CAAAZ,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEY,WAAW,KAAI,MAAM;EAEtD,MAAMC,cAAc,GAAGzB,OAAO,CAAC,MAAM;IACnC,MAAMmB,MAAiB,GAAG,CAAC,CAAC;IAC5B,IAAIZ,KAAK,EAAE;MACTY,MAAM,CAACZ,KAAK,GAAGA,KAAK;IACtB;IACA,IAAIC,MAAM,EAAE;MACVW,MAAM,CAACX,MAAM,GAAGA,MAAM;IACxB;IACA,IAAIC,IAAI,EAAE;MACRU,MAAM,CAACV,IAAI,GAAGA,IAAI;IACpB;IACA,IAAI,CAACF,KAAK,IAAI,CAACE,IAAI,IAAI,CAACD,MAAM,IAAI,CAACE,KAAK,EAAE;MACxCS,MAAM,CAACV,IAAI,GAAG,CAAC;IACjB;IACA,OAAOU,MAAM;EACf,CAAC,EAAE,CAACZ,KAAK,EAAEC,MAAM,EAAEC,IAAI,EAAEC,KAAK,CAAC,CAAC;EAEhC,oBACEX,KAAA,CAAAiB,aAAA,CAACf,IAAI;IACHS,KAAK,EAAEP,UAAU,CAACe,OAAO,CAAC,CACxB;MACEG,cAAc;MACdE,gBAAgB;MAChBC;IACF,CAAC,EACDL,MAAM,CAACO,IAAI,EACXD,cAAc,EACdf,KAAK,CACN;EAAE,GAEFI,OAAO,CACH;AAEX,CAAC;AAED,MAAMK,MAAM,GAAGhB,UAAU,CAACwB,MAAM,CAAC;EAC/BD,IAAI,EAAE;IAAEE,cAAc,EAAE;EAAS,CAAC;EAClCR,IAAI,EAAE;IAAES,eAAe,EAAE;EAAc;AACzC,CAAC,CAAC"}